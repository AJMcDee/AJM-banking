{"version":3,"sources":["AccountPage.js","Login.js","App.js","reportWebVitals.js","index.js"],"names":["AccountPage","token","setToken","useState","balance","setBalance","depositAmount","setDepositAmount","withdrawalAmount","setWithdrawalAmount","fetchBalance","localStorage","getItem","fetch","method","headers","body","then","data","text","info","setItem","catch","err","console","error","handleChange","e","target","name","value","useEffect","to","for","type","id","onChange","onClick","disabled","Login","isLoggedIn","setIsLoggedIn","input","setInput","handleInputChange","htmlFor","options","JSON","stringify","res","status","log","App","class","path","href","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.408ad7cf.chunk.js","sourcesContent":["import { Link } from \"react-router-dom\";\r\nimport { useEffect, useState, useRef } from \"react\";\r\n\r\nconst AccountPage = (token, setToken) => {\r\n  const [balance, setBalance] = useState(0);\r\n  const [depositAmount, setDepositAmount] = useState(0);\r\n  const [withdrawalAmount, setWithdrawalAmount] = useState(0);\r\n  // const depositInput = useRef(null)\r\n\r\n  useEffect(fetchBalance, []);\r\n\r\n  function fetchBalance() {\r\n    if (!token) {\r\n      setToken(localStorage.getItem(\"token\")); //CHANGE IN PRODUCTION\r\n    }\r\n    fetch(\"http://localhost:3552/balance\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n      },\r\n      body: `token=${token.token}`,\r\n    })\r\n      .then((data) => data.text())\r\n      .then((info) => {\r\n        setBalance(info);\r\n        localStorage.setItem(\"token\", token.token); //CHANGE IN PRODUCTION\r\n      })\r\n      .catch((err) => console.error(err));\r\n  }\r\n\r\n  function handleChange(e) {\r\n    if (e.target.name === \"deposit-amount\") {\r\n      setDepositAmount(e.target.value);\r\n    } else {\r\n      setWithdrawalAmount(e.target.value);\r\n    }\r\n  }\r\n\r\n  function handleDeposit(e) {\r\n    fetch(\"http://localhost:3552/deposit\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n      },\r\n      body: `token=${token.token}&amount=${depositAmount}`,\r\n    }).then((data) => {\r\n      setDepositAmount(0);\r\n      fetchBalance();\r\n    });\r\n  }\r\n\r\n  function handleWithdrawal(e) {\r\n    fetch(\"http://localhost:3552/withdraw\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n      },\r\n      body: `token=${token.token}&amount=${withdrawalAmount}`,\r\n    }).then((data) => {\r\n      setWithdrawalAmount(0);\r\n      fetchBalance();\r\n    });\r\n  }\r\n\r\n  // function submitWithdrawal() {\r\n  //   let withdrawalAmount = document.getElementById(\"withdrawal-amount\").value;\r\n  //   document.getElementById(\"withdrawal-amount\").value = 0;\r\n  //   let withdrawalResponse = document.getElementById(\"withdrawal-response\");\r\n  //   let currentBalance = parseInt(balanceField.textContent);\r\n  //   if (currentBalance >= withdrawalAmount) {\r\n  //     fetch(\"http://localhost:3552/withdraw\", {\r\n  //       method: \"POST\",\r\n  //       headers: {\r\n  //         \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n  //       },\r\n  //       body: `token=${token}&amount=${withdrawalAmount}`,\r\n  //     })\r\n  //       .then((data) => {\r\n  //         withdrawalResponse.textContent = \"SUCCESS\";\r\n\r\n  //         setTimeout(() => {\r\n  //           withdrawalResponse.textContent = \"\";\r\n  //         }, 1000);\r\n  //         fetchBalance();\r\n  //       })\r\n  //       .catch((err) => {\r\n  //         withdrawalResponse.textContent = \"Something Went Wrong\";\r\n  //       });\r\n  //   } else {\r\n  //     withdrawalResponse.textContent = \"Withdrawal Amount Too High\";\r\n  //   }\r\n  // }\r\n\r\n  return (\r\n    <div>\r\n      <Link to=\"/\">Home</Link>\r\n      <h1>Welcome to Your Bank Account</h1>\r\n\r\n      <h2>Your balance is: ${balance}.</h2>\r\n\r\n      <h3>Deposit</h3>\r\n      <form>\r\n        <label for=\"deposit-amount\">Amount:</label>\r\n        <input\r\n          type=\"number\"\r\n          name=\"deposit-amount\"\r\n          id=\"deposit-amount\"\r\n          onChange={handleChange}\r\n          value={depositAmount}\r\n        />\r\n      </form>\r\n      <button onClick={handleDeposit}>Deposit</button>\r\n\r\n      <h3>Withdrawal</h3>\r\n      <form>\r\n        <label for=\"withdrawal-amount\">Amount:</label>\r\n        <input\r\n          type=\"number\"\r\n          name=\"withdrawal-amount\"\r\n          id=\"withdrawal-amount\"\r\n          value={withdrawalAmount}\r\n          onChange={handleChange}\r\n        />\r\n      </form>\r\n      <button\r\n        onClick={handleWithdrawal}\r\n        disabled={+balance > withdrawalAmount ? \"\" : \"true\"}\r\n      >\r\n        {+balance > withdrawalAmount ? \"Withdraw\" : \"Amount Too High\"}\r\n      </button>\r\n      <span id=\"withdrawal-response\"></span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AccountPage;\r\n","import { Link, Redirect } from \"react-router-dom\";\r\nimport { useState } from \"react\";\r\n\r\nfunction Login({ isLoggedIn, setIsLoggedIn, token, setToken }) {\r\n  const [input, setInput] = useState({});\r\n\r\n  function handleInputChange(e) {\r\n    setInput({ ...input, [e.target.name]: e.target.value });\r\n  }\r\n\r\n  function handleClick() {\r\n    const options = {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(input),\r\n    };\r\n\r\n    fetch(\"http://localhost:3552/authenticate\", options)\r\n      .then((res) => {\r\n        if (res.status == 200) {\r\n          res.text().then((token) => {\r\n            setToken(token);\r\n            setIsLoggedIn(true);\r\n          });\r\n        }\r\n      })\r\n      .catch((err) => console.log(err));\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>Log in to AJM Banking</h1>\r\n      <form>\r\n        <label htmlFor=\"IBAN\">IBAN:</label>\r\n        <input type=\"text\" name=\"IBAN\" id=\"IBAN\" onChange={handleInputChange} />\r\n        <label htmlFor=\"PIN\">PIN:</label>\r\n        <input\r\n          type=\"password\"\r\n          name=\"PIN\"\r\n          id=\"PIN\"\r\n          onChange={handleInputChange}\r\n        />\r\n      </form>\r\n      <button onClick={handleClick}>Log In</button>\r\n      {isLoggedIn ? <Redirect to=\"/myaccount\" /> : null}\r\n    </div>\r\n  );\r\n}\r\nexport default Login;\r\n","import \"./App.css\";\nimport React, { useEffect, useState } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect,\n} from \"react-router-dom\";\nimport AccountPage from \"./AccountPage\";\nimport Login from \"./Login\";\nfunction App() {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  const [token, setToken] = useState(\"\");\n\n  return (\n    <div class=\"App\">\n      <Router>\n        <Switch>\n          <Route path={`/myaccount`}>\n            <AccountPage token={token} />\n          </Route>\n          <Route path={`/login`}>\n            <Login\n              isLoggedIn={isLoggedIn}\n              setIsLoggedIn={setIsLoggedIn}\n              token={token}\n              setToken={setToken}\n            />\n          </Route>\n          <Route path={`/`}>\n            <Link to=\"/login\"> {isLoggedIn ? \"Account\" : \"Log In\"}</Link>\n            <br />\n            {isLoggedIn ? (\n              <a href=\"\" onClick={() => setIsLoggedIn(false)}>\n                Log Out\n              </a>\n            ) : (\n              \"\"\n            )}\n            <br />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}